#!/bin/bash -l

# internal script variables
script=$(readlink -f $0)
scriptPath=`dirname ${script}`
workingPath=$(pwd)

# default variables
phpVersion="5.3 5.4 5.5 5.6"
dockerImage="vectorface/php"
phpSyntax=true
phpUnit=true
DUNIT_PHPSYNTAXCOMMAND="find /opt/source -type f -name \"*.php\" !  -path \"*/vendor/*\" -print0 | xargs -0 -n 1 -P 8 php -l | grep -v 'No syntax errors'"
DUNIT_PHPUNITCOMMAND="/opt/source/vendor/bin/phpunit"

# config path
configPath="${workingPath}/.dunitconfig"

# getopt That allows the options to be passed
while getopts ":hp:c:" opt; do
  shift $((OPTIND-1))
  case ${opt} in
    h)
      printf "Options:\n"
      printf "%-20s %-40s\n" '-c' 'Pass in a custom .dunit.config file'
      printf "%-20s %-40s\n" '-h' 'Displays help information'
      printf "%-20s %-40s\n" '-p' 'PHP Versions you wish to use (default: "5.3 5.4 5.5 5.6")'
      exit 0;
      ;;
    p)
      phpVersion=$OPTARG
      ;;
    c)
      configPath=$OPTARG
      ;;
    \?)
      printf "Invalid option: -$OPTARG\n"
      exit 1
      ;;
    :)
      printf "Option -$OPTARG requires an argument.\n"
      exit 1
      ;;
  esac
done

# config and global overwrite
if [ -a "${configPath}" ];
  then source ${configPath}
fi;

if [ -n "${DUNIT_PHPVERSION}" ];
  then phpVersion=${DUNIT_PHPVERSION}
fi

if [ -n "${DUNIT_PHPUNIT}" ];
  then phpUnit=${DUNIT_PHPUNIT}
fi

if [ -n "${DUNIT_PHPSYNTAX}" ];
  then phpSyntax=${DUNIT_PHPSYNTAX}
fi

if [ -n "${DUNIT_IMAGE_NAME}" ];
  then dockerImage=${DUNIT_IMAGE_NAME}
fi

# allow path to be passed to docker for mounting
if [ -n "$1" ];
  then workingPath="${workingPath}/$1";
fi

# check if they have docker
command -v docker >/dev/null 2>&1 || { printf >&2 "Docker is required to run the test suite against multiple versions of PHP.\nPlease just use ./vendor/bin/phpunit.\n"; exit 1; }

# determine the commands the script is going to be running
runCommand=''
if [ "${phpSyntax}" = true ];
  then runCommand="${phpSyntaxCommand};"
fi

if [ "${phpUnit}" = true ];
  then runCommand="${runCommand} ${phpUnitCommand}"
fi

# spin up containers for the versions we're testing against
for version in ${phpVersion}; do
  printf "\nRunning on PHP %s\n" ${version}
  if [ $phpSyntax == true ]; then
    echo "Checking syntax"
    eval "docker run -v ${workingPath}:/opt/source -i -t -w /opt/source ${dockerImage}${version} bash -c \" ${DUNIT_PHPSYNTAXCOMMAND} \""
  fi
  if [ $phpUnit == true ]; then
    echo "Running unit test suite"
    eval "docker run -v ${workingPath}:/opt/source -i -t -w /opt/source ${dockerImage}${version} bash -c \" ${DUNIT_PHPUNITCOMMAND} \""
  fi
done
