#!/bin/bash

# current version
dUnitVersion="(git)"
defaultPhpVersions="5.3 5.4 5.5 5.6"

# getopt That allows the options to be passed
while getopts ":hp:c:v" opt; do
  shift $((OPTIND-1))
  case ${opt} in
    h)
      printf "Options:\n"
      printf "%-20s %-40s\n" "-c" "The path to a custom config file .dunit.config file"
      printf "%-20s %-40s\n" "-h" "Displays help information"
      printf "%-20s %-40s\n" "-p" "PHP Versions you wish to use (default: \"${defaultPhpVersions}\")"
      printf "%-20s %-40s\n" "-v" "Displays DUnit version"
      exit 0;
      ;;
    v)
      printf "DUnit version ${dUnitVersion}\n"
      exit 0;
      ;;
    p)
      phpVersions=$OPTARG
      ;;
    c)
      configPath=$OPTARG
      ;;
    \?)
      printf "Invalid option: -$OPTARG\n"
      exit 1
      ;;
    :)
      printf "Option -$OPTARG requires an argument.\n"
      exit 1
      ;;
  esac
done

# config path is set to look at the current folder if not specified in the
# cli arguments
if [ -z "$configPath" ]; then
    configPath="$(pwd)/.dunitconfig"
fi;

# if the config file exists let's bring it in
if [ -f "$configPath" ]; then
    source ${configPath}
fi;

# ensure the variable $phpVersions is set
if [ -z "$phpVersions" ]; then
    if [ -z "${DUNIT_PHPVERSION}" ]; then
        phpVersions=$defaultPhpVersions
    else
        phpVersions=$DUNIT_PHPVERSION
    fi;
fi;

if [ -z "${DUNIT_DOCKERIMAGE}" ]; then
    DUNIT_DOCKERIMAGE="vectorface/php"
fi;

if [ -z "${DUNIT_PHPSYNTAX}" ]; then
    DUNIT_PHPSYNTAX=true
fi;

if [ -z "${DUNIT_PHPSYNTAXCOMMAND}" ]; then
    DUNIT_PHPSYNTAXCOMMAND="find /opt/source -type f -name \"*.php\" !  -path \"*/vendor/*\" -print0 | xargs -0 -n 1 -P 8 php -l | grep -v 'No syntax errors'"
fi;

if [ -z "${DUNIT_PHPUNIT}" ]; then
    DUNIT_PHPUNIT=true
fi;

if [ -z "${DUNIT_PHPUNITCOMMAND}" ]; then
    DUNIT_PHPUNITCOMMAND="/opt/source/vendor/bin/phpunit"
fi;

# check if they have docker
command -v docker >/dev/null 2>&1 || { printf >&2 "Docker is required to run the DUnit.\n"; exit 1; }

# spin up containers for the versions we're testing against
for version in $phpVersions; do
  printf "\nRunning on PHP %s\n" ${version}
  if [ $DUNIT_PHPSYNTAX == true ]; then
    echo "Checking syntax"
    eval "docker run -v $(pwd):/opt/source -i -t -w /opt/source ${DUNIT_DOCKERIMAGE}${version} bash -c \" ${DUNIT_PHPSYNTAXCOMMAND} \""
  fi
  if [ $DUNIT_PHPUNIT == true ]; then
    echo "Running unit test suite"
    eval "docker run -v $(pwd):/opt/source -i -t -w /opt/source ${DUNIT_DOCKERIMAGE}${version} bash -c \" ${DUNIT_PHPUNITCOMMAND} \""
  fi
done
