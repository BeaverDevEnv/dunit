#!/bin/bash

#Internal Script variables
SCRIPT=`realpath $0`
SCRIPTPATH=`dirname $SCRIPT`

#Default PHP versions
phpVersion="5.3 5.4 5.5 5.6"
dockerMountPath=$(pwd)
syntaxOnly=false
phpUnitCommand="/opt/source/vendor/bin/phpunit"
phpSyntaxCommand="find . -name '*.php' -print0 | xargs -0 -n1 -P8 php -l | grep -i 'on line'"
configPath="${SCRIPTPATH}/.dunit.config"

#getopt That allows the options to be passed
while getopts ":hp:c:" opt; do
  shift $((OPTIND-1))
  case ${opt} in
    h)
      printf "Options:\n"
      printf "%-20s %-40s\n" '-c' 'Pass in a custom .dunit.config file'
      printf "%-20s %-40s\n" '-h' 'Displays help information'
      printf "%-20s %-40s\n" '-p' 'PHP Versions you wish to use (default: "5.3 5.4 5.5 5.6")'
      exit 0;
      ;;
    p)
      phpVersion=$OPTARG
      ;;
    c)
      configPath=$OPTARG
      ;;
    \?)
      printf "Invalid option: -$OPTARG\n"
      exit 1
      ;;
    :)
      printf "Option -$OPTARG requires an argument.\n"
      exit 1
      ;;
  esac
done

if [ -a "${configPath}" ];
  then source ${configPath}
fi;

#Config & Global overwrite
if [ -n "${DUNIT_PHPVERSION}" ];
  then phpVersion=${DUNIT_PHPVERSION}
fi

if [ -n "${DUNIT_SYNTAXONLY}" ];
  then syntaxOnly=${DUNIT_SYNTAXONLY}
fi

if [ -n "${DUNIT_PHPUNITCOMMAND}" ];
  then phpUnitCommand=${DUNIT_PHPUNITCOMMAND}
fi

if [ -n "${DUNIT_PHPSYNTAXCOMMAND}" ];
  then phpSyntaxCommand=${DUNIT_PHPSYNTAXCOMMAND}
fi

#Allow path to be passed to docker for mounting
if [ -n "$1" ];
  then dockerMountPath="${dockerMountPath}/$1";
fi

#Check if they have docker
command -v docker >/dev/null 2>&1 || { printf >&2 "Docker is required to run the test suite against multiple versions of PHP.\nPlease just use ./vendor/bin/phpunit.\n"; exit 1; }

#Determine if we want PHP syntax lint only or just to run the unit tests
if [ "${syntaxOnly}" = true ];
  then runCommand=${phpSyntaxCommand}
else
  runCommand=${phpUnitCommand}
fi

#Spin up containers for the versions we're testing against
for version in ${phpVersion}; do
  printf "\nRunning on PHP %s\n" ${version}
  docker run -v ${dockerMountPath}:/opt/source -i -t -w /opt/source dbruce/debian7-php${version} sh -c "${runCommand}"
done
